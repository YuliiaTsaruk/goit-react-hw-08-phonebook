{"version":3,"file":"static/js/859.d0f91b06.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/layout/src/center.tsx","../node_modules/@chakra-ui/layout/src/stack/stack-item.tsx","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/layout/src/stack/stack.tsx","../node_modules/@chakra-ui/layout/src/stack/stack.utils.tsx","../node_modules/@chakra-ui/react-children-utils/dist/index.mjs","../node_modules/@chakra-ui/layout/src/link.tsx","pages/HomePage/HomePage.jsx"],"sourcesContent":["import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\n\nexport interface CenterProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * React component used to horizontally and vertically center its child.\n * It uses the popular `display: flex` centering technique.\n *\n * @see Docs https://chakra-ui.com/center\n */\nexport const Center = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n})\n\nCenter.displayName = \"Center\"\n\nexport interface AbsoluteCenterProps extends HTMLChakraProps<\"div\"> {\n  axis?: \"horizontal\" | \"vertical\" | \"both\"\n}\n\nconst centerStyles = {\n  horizontal: {\n    insetStart: \"50%\",\n    transform: \"translateX(-50%)\",\n  },\n  vertical: {\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n  },\n  both: {\n    insetStart: \"50%\",\n    top: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n}\n\n/**\n * React component used to horizontally and vertically center an element\n * relative to its parent dimensions.\n *\n * It uses the `position: absolute` strategy.\n *\n * @see Docs https://chakra-ui.com/center\n * @see WebDev https://web.dev/centering-in-css/#5.-pop-and-plop\n */\nexport const AbsoluteCenter = forwardRef<AbsoluteCenterProps, \"div\">(\n  function AbsoluteCenter(props, ref) {\n    const { axis = \"both\", ...rest } = props\n    return (\n      <chakra.div\n        ref={ref}\n        __css={centerStyles[axis]}\n        {...rest}\n        position=\"absolute\"\n      />\n    )\n  },\n)\n","import { ChakraComponent, chakra } from \"@chakra-ui/system\"\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nStackItem.displayName = \"StackItem\"\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cloneElement, Fragment, useMemo } from \"react\"\n\nimport { StackItem } from \"./stack-item\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   * @default \"0.5rem\"\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   * @default \"column\"\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   *\n   * @default false\n   *\n   * @deprecated - Use `direction=\"row\"` or `HStack` instead\n   */\n  isInline?: boolean\n}\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const dividerStyle = useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children)\n    return shouldUseChildren\n      ? validChildren\n      : validChildren.map((child, index) => {\n          // Prefer provided child key, fallback to index\n          const key = typeof child.key !== \"undefined\" ? child.key : index\n          const isLast = index + 1 === validChildren.length\n          const wrappedChild = <StackItem key={key}>{child}</StackItem>\n          const _child = shouldWrapChildren ? wrappedChild : child\n\n          if (!hasDivider) return _child\n\n          const clonedDivider = cloneElement(\n            divider as React.ReactElement<any>,\n            {\n              __css: dividerStyle,\n            },\n          )\n\n          const _divider = isLast ? null : clonedDivider\n\n          return (\n            <Fragment key={key}>\n              {_child}\n              {_divider}\n            </Fragment>\n          )\n        })\n  }, [\n    divider,\n    dividerStyle,\n    hasDivider,\n    shouldUseChildren,\n    shouldWrapChildren,\n    children,\n  ])\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={direction}\n      flexWrap={wrap}\n      gap={hasDivider ? undefined : spacing}\n      className={_className}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nStack.displayName = \"Stack\"\n","import { ResponsiveValue, SystemProps } from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\n\nexport type StackDirection = ResponsiveValue<\n  \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"\n>\n\ninterface Options {\n  spacing: SystemProps[\"margin\"]\n  direction: StackDirection\n}\n\nexport function getDividerStyles(options: Options) {\n  const { spacing, direction } = options\n\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n  }\n\n  return {\n    \"&\": mapResponsive(\n      direction,\n      (value: keyof typeof dividerStyles) => dividerStyles[value],\n    ),\n  }\n}\n","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(\n    (child) => isValidElement(child)\n  );\n}\nexport {\n  getValidChildren\n};\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface LinkProps extends HTMLChakraProps<\"a\">, ThemingProps<\"Link\"> {\n  /**\n   *  If `true`, the link will open in new tab\n   *\n   * @default false\n   */\n  isExternal?: boolean\n}\n\n/**\n * Links are accessible elements used primarily for navigation.\n *\n * It integrates well with other routing libraries like\n * React Router, Reach Router and Next.js Link.\n *\n * @example\n *\n * ```jsx\n * <Link as={ReactRouterLink} to=\"/home\">Home</Link>\n * ```\n *\n * @see Docs https://chakra-ui.com/link\n */\nexport const Link = forwardRef<LinkProps, \"a\">(function Link(props, ref) {\n  const styles = useStyleConfig(\"Link\", props)\n  const { className, isExternal, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.a\n      target={isExternal ? \"_blank\" : undefined}\n      rel={isExternal ? \"noopener\" : undefined}\n      ref={ref}\n      className={cx(\"chakra-link\", className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nLink.displayName = \"Link\"\n","import { useSelector } from 'react-redux';\nimport {\n  selectIsLoggedIn,\n  selectUserName,\n} from '../../redux/auth/authSelectors';\nimport { Link as ReactRouterLink } from 'react-router-dom';\nimport { Box, Text, Center, Stack, Link } from '@chakra-ui/react';\n\nexport default function HomePage() {\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const userName = useSelector(selectUserName);\n\n  return (\n    <Center>\n      <Box maxW=\"720px\" p=\"8\" mx=\"auto\">\n        <Stack spacing=\"4\">\n          <Text fontSize=\"2xl\" fontWeight=\"bold\">\n            {isLoggedIn ? `Hello ${userName}!` : 'Welcome to Phonebook!'}\n          </Text>\n          <Text fontSize=\"xl\">\n            {isLoggedIn ? (\n              <>\n                To view or add your contacts{' '}\n                <Link\n                  as={ReactRouterLink}\n                  to=\"/contacts\"\n                  textDecoration=\"underline\"\n                >\n                  click here\n                </Link>\n              </>\n            ) : (\n              'Please, register or log in to get access to the phonebook.'\n            )}\n          </Text>\n        </Stack>\n      </Box>\n    </Center>\n  );\n}\n"],"names":["Center","chakra","baseStyle","display","alignItems","justifyContent","displayName","centerStyles","horizontal","insetStart","transform","vertical","top","both","forwardRef","props","ref","axis","rest","div","__css","position","StackItem","className","flex","minWidth","Object","freeze","Stack","isInline","directionProp","direction","align","justify","_props$spacing","spacing","wrap","children","divider","shouldWrapChildren","dividerStyle","useMemo","options","prop","mapper","dividerStyles","column","my","mx","borderLeftWidth","borderBottomWidth","row","value","Array","isArray","map","item","isObject","keys","reduce","result","key","getDividerStyles","hasDivider","shouldUseChildren","clones","validChildren","Children","filter","child","isValidElement","getValidChildren","index","isLast","length","_child","clonedDivider","cloneElement","_divider","Fragment","_className","cx","flexDirection","flexWrap","gap","Link","styles","useStyleConfig","omitThemingProps","isExternal","a","target","rel","HomePage","isLoggedIn","useSelector","selectIsLoggedIn","userName","selectUserName","_jsx","Box","maxW","p","_jsxs","Text","fontSize","fontWeight","concat","_Fragment","as","ReactRouterLink","to","textDecoration"],"sourceRoot":""}